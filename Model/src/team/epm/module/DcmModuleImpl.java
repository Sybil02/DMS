package team.epm.module;

import java.awt.event.ActionEvent;

import java.util.Map;

import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.Session;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import team.epm.dcm.view.DcmCalcParameterVOImpl;
import team.epm.dcm.view.DcmComVsViewImpl;
import team.epm.dcm.view.DcmCombinationViewImpl;
import team.epm.dcm.view.DcmTemplateColumnViewImpl;
import team.epm.dcm.view.DcmTemplateCombinaVOImpl;
import team.epm.dcm.view.DcmTemplateViewImpl;
import team.epm.dms.view.DmsEnabledRoleImpl;
import team.epm.dms.view.DmsRoleViewImpl;
import team.epm.module.common.DcmModule;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 14 17:11:23 CST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DcmModuleImpl extends ApplicationModuleImpl implements DcmModule {
    /**
     * This is the default constructor (do not remove).
     */
    public DcmModuleImpl() {
    }

    @Override
    protected void prepareSession(Session session) {
        super.prepareSession(session);
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        Object userId = sessionScope.get("userId");
        if (userId != null) {
            this.getSession().getUserData().put("userId", userId);
        }
    }

    /**
     * Container's getter for DcmComVsView.
     * @return DcmComVsView
     */
    public ViewObjectImpl getDcmComVsView() {
        return (ViewObjectImpl)findViewObject("DcmComVsView");
    }

    /**
     * Container's getter for DcmCombinationView.
     * @return DcmCombinationView
     */
    public ViewObjectImpl getDcmCombinationView() {
        return (ViewObjectImpl)findViewObject("DcmCombinationView");
    }

    /**
     * Container's getter for DcmErrorView.
     * @return DcmErrorView
     */
    public ViewObjectImpl getDcmErrorView() {
        return (ViewObjectImpl)findViewObject("DcmErrorView");
    }

    /**
     * Container's getter for DcmJobView.
     * @return DcmJobView
     */
    public ViewObjectImpl getDcmJobView() {
        return (ViewObjectImpl)findViewObject("DcmJobView");
    }

    /**
     * Container's getter for DcmRoleTemplateView.
     * @return DcmRoleTemplateView
     */
    public ViewObjectImpl getDcmRoleTemplateView() {
        return (ViewObjectImpl)findViewObject("DcmRoleTemplateView");
    }

    /**
     * Container's getter for DcmTemplateColumnView.
     * @return DcmTemplateColumnView
     */
    public ViewObjectImpl getDcmTemplateColumnView() {
        return (ViewObjectImpl)findViewObject("DcmTemplateColumnView");
    }

    /**
     * Container's getter for DcmTemplateCombinationView.
     * @return DcmTemplateCombinationView
     */
    public ViewObjectImpl getDcmTemplateCombinationView() {
        return (ViewObjectImpl)findViewObject("DcmTemplateCombinationView");
    }

    /**
     * Container's getter for DcmTemplateView.
     * @return DcmTemplateView
     */
    public ViewObjectImpl getDcmTemplateView() {
        return (ViewObjectImpl)findViewObject("DcmTemplateView");
    }

    /**
     * Container's getter for DcmValidationView.
     * @return DcmValidationView
     */
    public ViewObjectImpl getDcmValidationView() {
        return (ViewObjectImpl)findViewObject("DcmValidationView");
    }

    /**
     * Container's getter for combinationsVS.
     * @return combinationsVS
     */
    public ViewLinkImpl getcombinationsVS() {
        return (ViewLinkImpl)findViewLink("combinationsVS");
    }

    /**
     * Container's getter for DcmComVsQueryView.
     * @return DcmComVsQueryView
     */
    public ViewObjectImpl getDcmComVsQueryView() {
        return (ViewObjectImpl)findViewObject("DcmComVsQueryView");
    }

    /**
     * Container's getter for DcmTemplateCatView.
     * @return DcmTemplateCatView
     */
    public ViewObjectImpl getDcmTemplateCatView() {
        return (ViewObjectImpl)findViewObject("DcmTemplateCatView");
    }
    /**
     *获取组合记录VO
     * @param templateId
     * @param combinationId
     * @return
     */
    public ViewObject getCombinationRecordView(String templateId,
                                               String combinationId) {
        ViewObject vo = null;
        if (null == combinationId) {
            return null;
        }
        //获取组合编码（组合表名）
        ViewObject combiantionView = this.getDcmCombinationView();
        ViewCriteria vc = combiantionView.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        ViewCriteriaItem item = vcr.ensureCriteriaItem("Id");
        item.setOperator("=");
        item.getValues().get(0).setValue(combinationId);
        vc.addRow(vcr);
        combiantionView.applyViewCriteria(vc);
        combiantionView.executeQuery();
        combiantionView.getViewCriteriaManager().setApplyViewCriteriaNames(null);
        
        if (combiantionView.hasNext()) {
            Row combinationRow = combiantionView.next();
            String combinationCode =
                (String)combinationRow.getAttribute("Code");
            String voName = "V"+templateId+combinationId;
            vo = this.findViewObject(voName);
            if (vo != null) {
                return vo;
            }
            //获取查询SQL
            ViewObject combinationVsQueryVo = this.getDcmComVsQueryView();
            combinationVsQueryVo.setNamedWhereClauseParam("combinationId",
                                                          combinationId);
            combinationVsQueryVo.executeQuery();

            StringBuffer sql_select = new StringBuffer();
            StringBuffer sql_from = new StringBuffer();
            StringBuffer sql_where = new StringBuffer();
            StringBuffer sql_order = new StringBuffer();
            sql_select.append("SELECT T1.ID,T2.ID \"TID\",NVL(T2.STATUS, 'CLOSE') \"STATUS\"");
            sql_from.append(" FROM \"").append(combinationCode).append("\" T1" +
                                                                       " LEFT JOIN DCM_TEMPLATE_COMBINATION T2" +
                                                                       " ON T1.ID = T2.COM_RECORD_ID" +
                                                                       " AND T2.TEMPLATE_ID = '").append(templateId).append("'");
            sql_where.append(" WHERE 1=1 ");
            sql_order.append(" ORDER BY ");
            int i = 3;
            while (combinationVsQueryVo.hasNext()) {
                Row row = combinationVsQueryVo.next();
                sql_select.append(",T").append(i).append(".MEANING").append(" \"").append(row.getAttribute("Code")).append("\"");
                sql_from.append(",\"").append(row.getAttribute("Source")).append("\" ").append("T").append(i);
                sql_where.append(" AND T1.\"").append(row.getAttribute("Code")).append("\"=T").append(i).append(".CODE");
                sql_where.append(" AND T").append(i).append(".LOCALE='").append(ADFContext.getCurrent().getLocale()).append("'");
                if (i == 3) {
                    sql_order.append(" T").append(i).append(".IDX");
                } else {
                    sql_order.append(",T").append(i).append(".IDX");
                }
                ++i;
            }
            StringBuffer sql = new StringBuffer();
            sql.append(sql_select).append(sql_from).append(sql_where).append(sql_order);
            System.out.println(sql);
            vo = this.createViewObjectFromQueryStmt(voName, sql.toString());
        }
        return vo;
    }

    /**
     * Container's getter for DcmValidationQueryView.
     * @return DcmValidationQueryView
     */
    public ViewObjectImpl getDcmValidationQueryView() {
        return (ViewObjectImpl)findViewObject("DcmValidationQueryView");
    }

    /**
     * Container's getter for DcmUserTemplateView.
     * @return DcmUserTemplateView
     */
    public ViewObjectImpl getDcmUserTemplateView() {
        return (ViewObjectImpl)findViewObject("DcmUserTemplateView");
    }

    /**
     * Container's getter for DcmCatTemplateQueryView.
     * @return DcmCatTemplateQueryView
     */
    public ViewObjectImpl getDcmCatTemplateQueryView() {
        return (ViewObjectImpl)findViewObject("DcmCatTemplateQueryView");
    }

    /**
     * Container's getter for DcmCombinationVsLnk.
     * @return DcmCombinationVsLnk
     */
    public ViewLinkImpl getDcmCombinationVsLnk() {
        return (ViewLinkImpl)findViewLink("DcmCombinationVsLnk");
    }

    /**
     * Container's getter for DcmTemplateColumnLnk.
     * @return DcmTemplateColumnLnk
     */
    public ViewLinkImpl getDcmTemplateColumnLnk() {
        return (ViewLinkImpl)findViewLink("DcmTemplateColumnLnk");
    }

    /**
     * Container's getter for DmsEnabledRole.
     * @return DmsEnabledRole
     */
    public DmsEnabledRoleImpl getDmsEnabledRole() {
        return (DmsEnabledRoleImpl)findViewObject("DmsEnabledRole");
    }

    /**
     * Container's getter for DcmRoleTemplateLnk.
     * @return DcmRoleTemplateLnk
     */
    public ViewLinkImpl getDcmRoleTemplateLnk() {
        return (ViewLinkImpl)findViewLink("DcmRoleTemplateLnk");
    }

    /**
     * Container's getter for DcmTemplateValidationView.
     * @return DcmTemplateValidationView
     */
    public ViewObjectImpl getDcmTemplateValidationView() {
        return (ViewObjectImpl)findViewObject("DcmTemplateValidationView");
    }

    /**
     * Container's getter for DcmTemplateValidationLnk.
     * @return DcmTemplateValidationLnk
     */
    public ViewLinkImpl getDcmTemplateValidationLnk() {
        return (ViewLinkImpl)findViewLink("DcmTemplateValidationLnk");
    }

    /**
     * Container's getter for DcmUnAssignedTemplate.
     * @return DcmUnAssignedTemplate
     */
    public ViewObjectImpl getDcmUnAssignedTemplate() {
        return (ViewObjectImpl)findViewObject("DcmUnAssignedTemplate");
    }


    /**
     * Container's getter for DcmTemplateCalcVO.
     * @return DcmTemplateCalcVO
     */
    public ViewObjectImpl getDcmTemplateCalcVO() {
        return (ViewObjectImpl)findViewObject("DcmTemplateCalcVO");
    }

    /**
     * Container's getter for DcmTemplateCalcLnk1.
     * @return DcmTemplateCalcLnk1
     */
    public ViewLinkImpl getDcmTemplateCalcLnk1() {
        return (ViewLinkImpl)findViewLink("DcmTemplateCalcLnk1");
    }


    /**
     * Container's getter for DcmCalcParameterVO.
     * @return DcmCalcParameterVO
     */
    public ViewObjectImpl getDcmCalcParameterVO() {
        return (ViewObjectImpl)findViewObject("DcmCalcParameterVO");
    }

    /**
     * Container's getter for DcmCalcParameterLnk.
     * @return DcmCalcParameterLnk
     */
    public ViewLinkImpl getDcmCalcParameterLnk() {
        return (ViewLinkImpl)findViewLink("DcmCalcParameterLnk");
    }


    /**
     * Container's getter for DcmTemplateCalcQueryVO1.
     * @return DcmTemplateCalcQueryVO1
     */
    public ViewObjectImpl getDcmTemplateCalcQueryVO() {
        return (ViewObjectImpl)findViewObject("DcmTemplateCalcQueryVO");
    }

    /**
     * Container's getter for DcmCalcParameterQueryVO.
     * @return DcmCalcParameterQueryVO
     */
    public ViewObjectImpl getDcmCalcParameterQueryVO() {
        return (ViewObjectImpl)findViewObject("DcmCalcParameterQueryVO");
    }

    /**
     * Container's getter for DcmTemplateCombinaVO.
     * @return DcmTemplateCombinaVO
     */
    public DcmTemplateCombinaVOImpl getDcmTemplateCombinaVO() {
        return (DcmTemplateCombinaVOImpl)findViewObject("DcmTemplateCombinaVO");
    }
}


