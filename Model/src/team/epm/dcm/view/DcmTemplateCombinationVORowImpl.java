package team.epm.dcm.view;

import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import team.epm.dcm.model.DcmTemplateCombinationImpl;
import team.epm.dcm.view.common.DcmTemplateCombinationVORow;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 19 17:07:14 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DcmTemplateCombinationVORowImpl extends ViewRowImpl implements DcmTemplateCombinationVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ComRecordId {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getComRecordId();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setComRecordId((String)value);
            }
        }
        ,
        CreatedAt {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getCreatedAt();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setCreatedAt((Date)value);
            }
        }
        ,
        CreatedBy {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setCreatedBy((String)value);
            }
        }
        ,
        Id {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getId();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setId((String)value);
            }
        }
        ,
        Status {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getStatus();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setStatus((String)value);
            }
        }
        ,
        TemplateId {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getTemplateId();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setTemplateId((String)value);
            }
        }
        ,
        UpdatedAt {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getUpdatedAt();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setUpdatedAt((Date)value);
            }
        }
        ,
        UpdatedBy {
            public Object get(DcmTemplateCombinationVORowImpl obj) {
                return obj.getUpdatedBy();
            }

            public void put(DcmTemplateCombinationVORowImpl obj,
                            Object value) {
                obj.setUpdatedBy((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(DcmTemplateCombinationVORowImpl object);

        public abstract void put(DcmTemplateCombinationVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int COMRECORDID = AttributesEnum.ComRecordId.index();
    public static final int CREATEDAT = AttributesEnum.CreatedAt.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int TEMPLATEID = AttributesEnum.TemplateId.index();
    public static final int UPDATEDAT = AttributesEnum.UpdatedAt.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DcmTemplateCombinationVORowImpl() {
    }

    /**
     * Gets DcmTemplateCombination entity object.
     * @return the DcmTemplateCombination
     */
    public DcmTemplateCombinationImpl getDcmTemplateCombination() {
        return (DcmTemplateCombinationImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for COM_RECORD_ID using the alias name ComRecordId.
     * @return the COM_RECORD_ID
     */
    public String getComRecordId() {
        return (String) getAttributeInternal(COMRECORDID);
    }

    /**
     * Sets <code>value</code> as attribute value for COM_RECORD_ID using the alias name ComRecordId.
     * @param value value to set the COM_RECORD_ID
     */
    public void setComRecordId(String value) {
        setAttributeInternal(COMRECORDID, value);
    }

    /**
     * Gets the attribute value for CREATED_AT using the alias name CreatedAt.
     * @return the CREATED_AT
     */
    public Date getCreatedAt() {
        return (Date) getAttributeInternal(CREATEDAT);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_AT using the alias name CreatedAt.
     * @param value value to set the CREATED_AT
     */
    public void setCreatedAt(Date value) {
        setAttributeInternal(CREATEDAT, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public String getCreatedBy() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for ID using the alias name Id.
     * @return the ID
     */
    public String getId() {
        return (String) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as attribute value for ID using the alias name Id.
     * @param value value to set the ID
     */
    public void setId(String value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for STATUS using the alias name Status.
     * @return the STATUS
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for STATUS using the alias name Status.
     * @param value value to set the STATUS
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for TEMPLATE_ID using the alias name TemplateId.
     * @return the TEMPLATE_ID
     */
    public String getTemplateId() {
        return (String) getAttributeInternal(TEMPLATEID);
    }

    /**
     * Sets <code>value</code> as attribute value for TEMPLATE_ID using the alias name TemplateId.
     * @param value value to set the TEMPLATE_ID
     */
    public void setTemplateId(String value) {
        setAttributeInternal(TEMPLATEID, value);
    }

    /**
     * Gets the attribute value for UPDATED_AT using the alias name UpdatedAt.
     * @return the UPDATED_AT
     */
    public Date getUpdatedAt() {
        return (Date) getAttributeInternal(UPDATEDAT);
    }

    /**
     * Sets <code>value</code> as attribute value for UPDATED_AT using the alias name UpdatedAt.
     * @param value value to set the UPDATED_AT
     */
    public void setUpdatedAt(Date value) {
        setAttributeInternal(UPDATEDAT, value);
    }

    /**
     * Gets the attribute value for UPDATED_BY using the alias name UpdatedBy.
     * @return the UPDATED_BY
     */
    public String getUpdatedBy() {
        return (String) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for UPDATED_BY using the alias name UpdatedBy.
     * @param value value to set the UPDATED_BY
     */
    public void setUpdatedBy(String value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
